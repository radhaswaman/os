#include <stdio.h>

#define MAX 10

typedef struct {
    int pid, bt, priority, at, wt, tat, ct, remaining;
} Process;

int main() {
    Process p[MAX];
    int n, choice;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nProcess %d - BT, Priority, AT: ", i + 1);
        scanf("%d %d %d", &p[i].bt, &p[i].priority, &p[i].at);
    }

    do {
        printf("\nMenu:\n1. Non-Preemptive Priority Scheduling\n2. Preemptive Priority Scheduling\n3. Exit\nChoice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            int completedCount = 0, time = 0;
            int completed[MAX] = {0};

            while (completedCount < n) {
                int highestPriority = -1;
                for (int i = 0; i < n; i++) {
                    if (!completed[i] && p[i].at <= time &&
                        (highestPriority == -1 || p[i].priority < p[highestPriority].priority)) {
                        highestPriority = i;
                    }
                }

                if (highestPriority == -1) {
                    time++;
                    continue;
                }

                time += p[highestPriority].bt;
                p[highestPriority].ct = time;
                completed[highestPriority] = 1;
                completedCount++;
            }

            // Calculate WT and TAT
            for (int i = 0; i < n; i++) {
                p[i].tat = p[i].ct - p[i].at;
                p[i].wt = p[i].tat - p[i].bt;
            }

            // Display Process Table
            printf("\nPID\tPriority\tAT\tBT\tCT\tWT\tTAT\n");
            for (int i = 0; i < n; i++) {
                printf("%d\t%d\t\t%d\t%d\t%d\t%d\t%d\n", 
                    p[i].pid, p[i].priority, p[i].at, p[i].bt, 
                    p[i].ct, p[i].wt, p[i].tat);
            }

        } else if (choice == 2) {
            int time = 0, completedCount = 0;

            // Initialize remaining burst times
            for (int i = 0; i < n; i++) {
                p[i].remaining = p[i].bt;
            }

            while (completedCount < n) {
                int highestPriority = -1;
                for (int i = 0; i < n; i++) {
                    if (p[i].at <= time && p[i].remaining > 0 &&
                        (highestPriority == -1 || p[i].priority < p[highestPriority].priority)) {
                        highestPriority = i;
                    }
                }

                if (highestPriority == -1) {
                    time++;
                    continue;
                }

                p[highestPriority].remaining--;
                time++;

                if (p[highestPriority].remaining == 0) {
                    p[highestPriority].ct = time;
                    completedCount++;
                }
            }

            // Calculate WT and TAT
            for (int i = 0; i < n; i++) {
                p[i].tat = p[i].ct - p[i].at;
                p[i].wt = p[i].tat - p[i].bt;
            }

            // Display Process Table
            printf("\nPID\tPriority\tAT\tBT\tCT\tWT\tTAT\n");
            for (int i = 0; i < n; i++) {
                printf("%d\t%d\t\t%d\t%d\t%d\t%d\t%d\n", 
                    p[i].pid, p[i].priority, p[i].at, p[i].bt, 
                    p[i].ct, p[i].wt, p[i].tat);
            }

        } else if (choice != 3) {
            printf("Invalid choice!\n");
        }
    } while (choice != 3);

    printf("Exiting...\n");
    return 0;
}