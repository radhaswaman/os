#include <stdio.h>

#define MAX 10

typedef struct {
    int pid, bt, priority, at, wt, tat, ct, remaining;
} Process;

int main() {
    Process p[MAX];
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input for processes
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nProcess %d - BT, Priority, AT: ", i + 1);
        scanf("%d %d %d", &p[i].bt, &p[i].priority, &p[i].at);
    }

    int time = 0, completedCount = 0;

    // Initialize remaining burst times
    for (int i = 0; i < n; i++) {
        p[i].remaining = p[i].bt;
    }

    // Preemptive Priority Scheduling Logic
    while (completedCount < n) {
        int highestPriority = -1;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && p[i].remaining > 0 &&
                (highestPriority == -1 || p[i].priority < p[highestPriority].priority)) {
                highestPriority = i;
            }
        }

        if (highestPriority == -1) {
            time++;
            continue;
        }

        p[highestPriority].remaining--;
        time++;

        if (p[highestPriority].remaining == 0) {
            p[highestPriority].ct = time;
            completedCount++;
        }
    }

    // Calculate Waiting Time and Turnaround Time
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;
    }

    // Display Process Table
    printf("\nPID\tPriority\tAT\tBT\tCT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t%d\t%d\t%d\t%d\n", 
            p[i].pid, p[i].priority, p[i].at, p[i].bt, 
            p[i].ct, p[i].wt, p[i].tat);
    }

    return 0;
}