#include <stdio.h>

typedef struct process {
    int pid, at, bt, tat, wt, originalBT, ct;
} Process;

void roundRobin(Process p[], int n, int tq) {
    int currentTime = 0;
    int completedProcesses = 0;
    int queueEmpty = 1;

    while (completedProcesses < n) {
        queueEmpty = 1;
        for (int j = 0; j < n; j++) {
            if (p[j].bt > 0 && p[j].at <= currentTime) {
                queueEmpty = 0;
                if (p[j].bt > tq) {
                    p[j].bt -= tq;
                    currentTime += tq;
                } else {
                    currentTime += p[j].bt;
                    p[j].bt = 0;
                    completedProcesses++;
                    p[j].ct = currentTime;
                    p[j].tat = p[j].ct - p[j].at;
                    p[j].wt = p[j].tat - p[j].originalBT;
                }
            }
        }
        if (queueEmpty) {
            currentTime++;
        }
    }

    printf("\nRound Robin Process Execution Results:\n");
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", 
               p[i].pid, p[i].at, p[i].originalBT, p[i].ct, p[i].tat, p[i].wt);
    }
}

void sort(struct process p[], int n) {
    // Sorting processes based on burst time (bt) using bubble sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].bt > p[j + 1].bt) {
                struct process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

void calculateTimes(struct process p[], int n) {
    float totalTAT = 0;  // Total Turnaround Time
    float totalWT = 0;   // Total Waiting Time

    p[0].ct = p[0].at + p[0].bt; // Completion time of the first process
    p[0].tat = p[0].ct - p[0].at; // Turnaround time = Completion time - Arrival time
    p[0].wt = p[0].tat - p[0].bt; // Waiting time = Turnaround time - Burst time

    totalTAT += p[0].tat;
    totalWT += p[0].wt;

    for (int i = 1; i < n; i++) {
        // Completion time is based on the previous process
        if (p[i].at > p[i - 1].ct) {
            p[i].ct = p[i].at + p[i].bt; // Idle time handling
        } else {
            p[i].ct = p[i - 1].ct + p[i].bt;
        }

        p[i].tat = p[i].ct - p[i].at; // Turnaround time
        p[i].wt = p[i].tat - p[i].bt; // Waiting time

        totalTAT += p[i].tat;
        totalWT += p[i].wt;
    }

    printf("\nShortest Job First (SJF) Process Execution Results:\n");
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", 
               p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }

    printf("Average Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);
}

int main() {
    int n, tq, choice;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time for Process %d: ", i + 1);
        scanf("%d", &p[i].at);
        printf("Enter Burst Time for Process %d: ", i + 1);
        scanf("%d", &p[i].bt);
        p[i].originalBT = p[i].bt;
        p[i].tat = p[i].wt = p[i].ct = 0;
    }

    printf("Choose the scheduling algorithm:\n");
    printf("1. Round Robin\n");
    printf("2. Shortest Job First (SJF)\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("Enter time quantum for Round Robin: ");
            scanf("%d", &tq);
            roundRobin(p, n, tq);
            break;
        case 2:
            sort(p, n);
            calculateTimes(p, n);
            break;
        default:
            printf("Invalid choice!\n");
            break;
    }

    return 0;
}