#include <stdio.h>

typedef struct process {
    int pid, at, bt, tat, wt, originalBT, ct;
} Process;

int main() {
    int n, tq, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process p[n];

    printf("Enter time quantum: ");
    scanf("%d", &tq);
    printf("\n");

    for (i = 0; i < n; i++) {
        printf("Enter process ID: ");
        scanf("%d", &p[i].pid);
        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);
        printf("Enter burst time: ");
        scanf("%d", &p[i].bt);
        p[i].originalBT = p[i].bt;
        p[i].tat = 0;
        p[i].wt = 0;
        p[i].ct = 0;
        printf("\n");
    }

    int currentTime = 0;
    int completedProcesses = 0;
    int queueEmpty = 1;
    i = 0;

    while (completedProcesses < n) {
        queueEmpty = 1;
        for (int j = 0; j < n; j++) {
            if (p[j].bt > 0 && p[j].at <= currentTime) {
                queueEmpty = 0;
                if (p[j].bt > tq) {
                    p[j].bt -= tq;
                    currentTime += tq;
                } else {
                    currentTime += p[j].bt;
                    p[j].bt = 0;
                    completedProcesses++;
                    p[j].ct = currentTime;
                    p[j].tat = p[j].ct - p[j].at;
                    p[j].wt = p[j].tat - p[j].originalBT;
                }
            }
        }
        if (queueEmpty) {
            currentTime++;
        }
    }

    printf("\nProcess Execution Results:\n");
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", 
               p[i].pid, p[i].at, p[i].originalBT, p[i].ct, p[i].tat, p[i].wt);
    }

    return 0;
}