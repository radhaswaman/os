#include <stdio.h>

typedef struct
{
    int Pid;
    int allocation[3];
    int max[3];
    int need[3];
} Process;

int main()
{
    int n, m = 3;
    int i, j;

    printf("\n- *****BANKER'S ALGORITHM*\n");

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process Pro[n];
    int available[m];
    int total[m];
    int safeSeq[n];
    int finished[n];

    for (i = 0; i < n; i++)
    {
        finished[i] = 0;
    }

    printf("Enter total resources (3 types): ");
    for (i = 0; i < m; i++)
    {
        scanf("%d", &total[i]);
    }

    printf("Enter available resources (3 types): ");
    for (i = 0; i < m; i++)
    {
        scanf("%d", &available[i]);
    }

    for (i = 0; i < n; i++)
    {
        Pro[i].Pid = i + 1;
        printf("\nEnter allocation for Process %d (3 types): ", Pro[i].Pid);
        for (j = 0; j < m; j++)
        {
            scanf("%d", &Pro[i].allocation[j]);
        }
        printf("Enter maximum need for Process %d (3 types): ", Pro[i].Pid);
        for (j = 0; j < m; j++)
        {
            scanf("%d", &Pro[i].max[j]);
            Pro[i].need[j] = Pro[i].max[j] - Pro[i].allocation[j];
            if (Pro[i].need[j] < 0) {
                printf("Error: Need cannot be negative. Please check the input.\n");
                return 0;
            }
        }
    }

    int count = 0;

    for (j = 0; j < m; j++) {
        int allocated = 0;
        for (i = 0; i < n; i++) {
            allocated += Pro[i].allocation[j];
        }
        if (allocated + available[j] > total[j]) {
            printf("Error: Total allocated resources exceed system capacity. Invalid input.\n");
            return 0;
        }
    }

    while (count < n)
    {
        int found = 0;

        for (i = 0; i < n; i++)
        {
            if (!finished[i])
            {
                int canAllocate = 1;

                for (j = 0; j < m; j++)
                {
                    if (Pro[i].need[j] > available[j])
                    {
                        canAllocate = 0;
                        break;
                    }
                }

                if (canAllocate)
                {
                    for (j = 0; j < m; j++)
                    {
                        available[j] += Pro[i].allocation[j];
                    }

                    safeSeq[count++] = Pro[i].Pid;
                    finished[i] = 1;
                    found = 1;
                }
            }
        }

        if (!found)
        {
            printf("System is in an unsafe state!\n");
            return 0;
        }
    }

    printf("\nSystem is in a safe state.\nSafe sequence: ");
    for (i = 0; i < n; i++)
    {
        printf("P%d ", safeSeq[i]);
    }
    printf("\n");

    printf("\nTotal resources in the system:\n");
    for (i = 0; i < m; i++)
    {
        printf("Resource %d: %d\n", i + 1, total[i]);
    }

    return 0;
}
