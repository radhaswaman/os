#include <stdio.h>

struct proc {
    int id;     // Process ID
    int at;     // Arrival Time
    int bt;     // Burst Time
    int ct;     // Completion Time
    int tat;    // Turnaround Time
    int wt;     // Waiting Time
};

void sort(struct proc p[], int n) {
    // Sorting processes based on burst time (bt) using bubble sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].bt > p[j + 1].bt) {
                struct proc temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

void calculateTimes(struct proc p[], int n) {
    float totalTAT = 0;  // Total Turnaround Time
    float totalWT = 0;   // Total Waiting Time

    p[0].ct = p[0].at + p[0].bt; // Completion time of the first process
    p[0].tat = p[0].ct - p[0].at; // Turnaround time = Completion time - Arrival time
    p[0].wt = p[0].tat - p[0].bt; // Waiting time = Turnaround time - Burst time

    totalTAT += p[0].tat;
    totalWT += p[0].wt;

    for (int i = 1; i < n; i++) {
        // Completion time is based on the previous process
        if (p[i].at > p[i - 1].ct) {
            p[i].ct = p[i].at + p[i].bt; // Idle time handling
        } else {
            p[i].ct = p[i - 1].ct + p[i].bt;
        }

        p[i].tat = p[i].ct - p[i].at; // Turnaround time
        p[i].wt = p[i].tat - p[i].bt; // Waiting time

        totalTAT += p[i].tat;
        totalWT += p[i].wt;
    }

    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", 
            p[i].id, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }

    printf("Average Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct proc p[n];

    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter Arrival Time for Process %d: ", i + 1);
        scanf("%d", &p[i].at);
        printf("Enter Burst Time for Process %d: ", i + 1);
        scanf("%d", &p[i].bt);
    }

    // Sort processes based on burst time
    sort(p, n);

    // Calculate completion, turnaround, and waiting times
    calculateTimes(p, n);

    return 0;
}