#include <stdio.h>

// Structure to hold process information
typedef struct {
    int processID;
    int arrivalTime;
    int burstTime;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
} Process;

// Function to sort processes by arrival time (for FCFS)
void sortByArrivalTime(Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].arrivalTime > proc[j + 1].arrivalTime) {
                Process temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }
}

// Function to sort processes by burst time (for SJF)
void sortByBurstTime(Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].burstTime > proc[j + 1].burstTime) {
                Process temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }
}

// Function to calculate completion, turnaround, and waiting times
void calculateTimes(Process proc[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < proc[i].arrivalTime) {
            currentTime = proc[i].arrivalTime;
        }
        proc[i].completionTime = currentTime + proc[i].burstTime;
        currentTime = proc[i].completionTime;
        proc[i].turnaroundTime = proc[i].completionTime - proc[i].arrivalTime;
        proc[i].waitingTime = proc[i].turnaroundTime - proc[i].burstTime;
    }
}

// Function to print Gantt chart and process details
void printResults(Process proc[], int n) {
    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        printf("| P%d ", proc[i].processID);
    }
    printf("|\n");

    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < proc[i].arrivalTime) {
            currentTime = proc[i].arrivalTime;
        }
        printf("%d    ", currentTime);
        currentTime += proc[i].burstTime;
    }
    printf("%d\n", currentTime);

    // Print table of process details
    printf("\nProcess Details:\n");
    printf("ID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\n", proc[i].processID, proc[i].arrivalTime, proc[i].burstTime, proc[i].completionTime, proc[i].turnaroundTime, proc[i].waitingTime);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process proc[n];
    for (int i = 0; i < n; i++) {
        proc[i].processID = i + 1;
        printf("Enter arrival time and burst time for Process %d: ", i + 1);
        scanf("%d %d", &proc[i].arrivalTime, &proc[i].burstTime);
    }

    // FCFS
    printf("\nFirst Come First Serve (FCFS):\n");
    sortByArrivalTime(proc, n);
    calculateTimes(proc, n);
    printResults(proc, n);

    // SJF (non-preemptive)
    printf("\nShortest Job First (SJF):\n");
    sortByBurstTime(proc, n);
    calculateTimes(proc, n);
    printResults(proc, n);

    return 0;
}
