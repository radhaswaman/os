#include <stdio.h>

#define MAX 10

typedef struct {
    int pid;     // Process ID
    int bt;      // Burst Time
    int priority;// Priority (for Priority Scheduling)
    int at;      // Arrival Time
    int ct;      // Completion Time
    int tat;     // Turnaround Time
    int wt;      // Waiting Time
} Process;

// Function to sort processes by Burst Time (SJF Scheduling)
void sortByBurstTime(Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].bt > p[j + 1].bt) {
                Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

// Function to calculate times for SJF Scheduling
void calculateTimesSJF(Process p[], int n) {
    float totalTAT = 0, totalWT = 0;

    p[0].ct = p[0].at + p[0].bt;
    p[0].tat = p[0].ct - p[0].at;
    p[0].wt = p[0].tat - p[0].bt;

    totalTAT += p[0].tat;
    totalWT += p[0].wt;

    for (int i = 1; i < n; i++) {
        if (p[i].at > p[i - 1].ct) {
            p[i].ct = p[i].at + p[i].bt;
        } else {
            p[i].ct = p[i - 1].ct + p[i].bt;
        }
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;

        totalTAT += p[i].tat;
        totalWT += p[i].wt;
    }

    printf("\nSJF Scheduling:\n");
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }
    printf("Average Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);
}

// Function to calculate times for Priority Scheduling
void calculateTimesPriority(Process p[], int n) {
    int completedCount = 0, time = 0;
    int completed[MAX] = {0};
    float totalTAT = 0, totalWT = 0;

    while (completedCount < n) {
        int highestPriority = -1;
        for (int i = 0; i < n; i++) {
            if (!completed[i] && p[i].at <= time &&
                (highestPriority == -1 || p[i].priority < p[highestPriority].priority)) {
                highestPriority = i;
            }
        }

        if (highestPriority == -1) {
            time++;
            continue;
        }

        time += p[highestPriority].bt;
        p[highestPriority].ct = time;
        completed[highestPriority] = 1;
        completedCount++;
    }

    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;
        totalTAT += p[i].tat;
        totalWT += p[i].wt;
    }

    printf("\nPriority Scheduling:\n");
    printf("PID\tPriority\tAT\tBT\tCT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].priority, p[i].at, p[i].bt,
               p[i].ct, p[i].wt, p[i].tat);
    }
    printf("Average Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);
}

int main() {
    Process p[MAX];
    int n, choice;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nProcess %d - Arrival Time, Burst Time, Priority: ", i + 1);
        scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].priority);
    }

    printf("\nChoose Scheduling Algorithm:\n");
    printf("1. Shortest Job First (SJF)\n");
    printf("2. Priority Scheduling\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        sortByBurstTime(p, n);  // Sort by Burst Time for SJF
        calculateTimesSJF(p, n);
    } else if (choice == 2) {
        calculateTimesPriority(p, n);  // Priority Scheduling
    } else {
        printf("Invalid choice!\n");
    }

    return 0;
}